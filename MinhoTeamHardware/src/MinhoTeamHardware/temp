  
  if(analogRead(FreeWheelButton)>500 && FreeWheel==false){
    omni.stop_motors();
    FreeWheel = true;
  }
  else if(analogRead(FreeWheelButton)<500 && FreeWheel==true){
    FreeWheel = false;
  }
  
  if(millis()-comunicationTimeOutTimeStamp>comunicationTimeOutLimitTime)
  {
    omni.stop_motors();
    comunicationTimeOutTimeStamp = millis();
  }
  
  //debug
  #if defined(LOOPDEBUG)
    loopTime = millis();
  #endif

  if(Serial1.available()>0)
  {
   String S1 = Serial1.readStringUntil('\n');
   /*bussolaValor = S1.toFloat();*/
   char buffer[10];
   S1.toCharArray(buffer, 10);
   bussolaValor = atof(buffer);
   
   //debug
   #if defined(IMUDEBUG)
    Serial.println(bussolaValor);
   #endif
  }
  
  if(millis()-baterryTimeStamp>baterryLimitTime)
  {
    batteryCam = analogRead(CamBattery) * maxVoltsBatteryCam / maxBatteryCam;
    
    batteryPC = analogRead(PcBattery) * maxVoltsBatteryPC / maxBatteryPC;
    
    battery = omni.read_battery();
    
    battery-=3;//Erro de leitura
    
    if(battery<20 && battery>4) batteryLow = true;
    else batteryLow = false;
    
    if(batteryPC<10.5 && batteryPC>5) batteryLowPC = true;
    else batteryLowPC = false;
    
    if(batteryCam<5.5 && batteryCam>3) batteryLowCam = true;
    else batteryLowCam = false;
    
    baterryTimeStamp = millis();
  }

  #if defined(SENDDATA)
    if(millis()-dataSendTimeStamp>dataSendLimitTime)
    {
      if(analogRead(BALLPIN)>500) have_ball = 1;
      else have_ball = 0;
      sendDados();
      dataSendTimeStamp = millis();
    }
  #endif
  
  #if defined(DEBUGPID)
    if(millis()-dataSendTimeStamp>dataSendLimitTime)
    {
      Serial.print("P: ");
      Serial.print(P);
      Serial.print(" I: ");
      Serial.print(I);
      Serial.print(" D: ");
      Serial.print(D);
      
      Serial.print(" Ramp_time(B): ");
      Serial.print(B);
      Serial.print(" Word slope(N): ");
      Serial.print(N);
      Serial.print(" Kl(M): ");
      Serial.println(M);
      dataSendTimeStamp = millis();
    }
  #endif
  
  if(millis()-encoderTimeStamp>encoderLimitTime)
  {
    readEncoders();
    encoderTimeStamp = millis();
  }

  if(batteryLow){
    
    if(millis()-baterryLowTimeStamp>baterryLowLimitTime)
    {
      tone(Buzzer, 4000,baterryLowLimitTime/2);
      baterryLowTimeStamp = millis();
    }
  }
  
  if(batteryLowPC){
    if(millis()-baterryLowPCTimeStamp>baterryLowPCLimitTime)
    {
      tone(Buzzer, 4500,baterryLowPCLimitTime/2);
      baterryLowPCTimeStamp = millis();
    }
  }
  
  if(batteryLowCam){
    if(millis()-baterryLowCamTimeStamp>baterryLowCamLimitTime)
    {
      tone(Buzzer, 5000,baterryLowCamLimitTime/2);
      baterryLowCamTimeStamp = millis();
    }
  }

  if(Serial.available()>0)
  {
        String lido = Serial.readStringUntil('\n');
        comunicationTimeOutTimeStamp = millis();
     
        if(lido[0]=='A')
        {
          String lido2 = lido.substring(2, lido.indexOf('!'));
          String lido3 = lido.substring(lido.indexOf('!')+1, lido.length());
          int val = lido2.toInt();
          int val2 = lido3.toInt();
          omni.mov_lin1m_nopid(M3,-val);
          delay(1);
          omni.mov_lin1m_nopid(M1,val);
          delay(1);
          omni.mov_lin1m_nopid(M2,val2);
          delay(1);
          Serial.flush();
        }
        else if(lido[0]=='S')
        {
           String Sservo = lido.substring(1, lido.indexOf('\n'));
           int servo = Sservo.toInt();
           myservo.write(servo);
           //debug
          #if defined(SERVODEBUG)
            Serial.print("Servo: ");
             Serial.println(servo);
          #endif
           
        }
        else if(lido[0]=='p'){
          P-=50;
          omni.set_PID(P,I,D);
          delay(10);
        }
        else if(lido[0]=='P'){
          P+=50;
          omni.set_PID(P,I,D);
          delay(10);
        }
        else if(lido[0]=='i'){
          I-=50;
          omni.set_PID(P,I,D);
          delay(10);
        }
        else if(lido[0]=='I'){
        I+=50;
        omni.set_PID(P,I,D);
          delay(10);
        }
        else if(lido[0]=='d'){
          D-=50;
          omni.set_PID(P,I,D);
          delay(10);
        }
        else if(lido[0]=='D'){
          D+=50;
          
          omni.set_PID(P,I,D);
          delay(10);
        }
        
        else if(lido[0]=='b'){
          B-=50;
          omni.set_ramp(B,N,M); 
          delay(15);
        }
        else if(lido[0]=='B'){
          B+=50;
          omni.set_ramp(B,N,M); 
          delay(15);
        }
        
        else if(lido[0]=='n'){
          N-=50;
          omni.set_ramp(B,N,M); 
          delay(15);
        }
        else if(lido[0]=='N'){
          N+=50;
          omni.set_ramp(B,N,M); 
          delay(15);
        }
        else if(lido[0]=='m'){
          M-=50;
          omni.set_ramp(B,N,M); 
          delay(15);
        }
        else if(lido[0]=='M'){
          M+=50;
          omni.set_ramp(B,N,M); 
          delay(15);
        }
        else if(lido[0]=='#')
        {
          Serial1.write("r");
        }
        else if(lido[0]=='x')
        {
            resetEncoders();
        }
        else if(lido[0]=='K')
        {
          String chuto = lido.substring(2, lido.indexOf('\n'));
          int kickTime = chuto.toInt();

          if(kickTime>0)
          {
            if(kickTime>maxKick)kickTime = maxKick;
            if(kickTime < 0)kickTime = 0;
            digitalWrite(KICKPIN, HIGH);
            Timer1.initialize(kickTime*1000);

          }
        }
        else
        {
          String linear = getValue(lido, ',', 0);
          String rotacao = getValue(lido, ',', 1);
          String direcao = getValue(lido, ',', 2);
          
          String tipoChuto = getValue(lido, ',', 3);
          String chuto = getValue(lido, ',', 4);
           
          String direct_dribler1 = getValue(lido, ',', 5);
          String vel_dribler1 = getValue(lido, ',', 6);
          String direct_dribler2 = getValue(lido, ',', 7);
          String vel_dribler2 = getValue(lido, ',', 8);
          
          String resetEnc1 = getValue(lido, ',', 9);
          String resetEnc2 = getValue(lido, ',', 10);
          String resetEnc3 = getValue(lido, ',', 11);
          
          int  linear_speedInt = linear.toInt();
          int  rotational_speedInt = rotacao.toInt();
          int  directionsInt = direcao.toInt();
          
          directionsInt = 360 - directionsInt;   
         
          if(tipoChuto=="0"){
            myservo.write(servo01);
            delay(300);
            }
          else if(tipoChuto=="1"){
            myservo.write(servo02);
            delay(300);
            }
            
          int kickTime = chuto.toInt();
          
          if(linear_speedInt<0) linear_speedInt = 0;
          else if(linear_speedInt>100) linear_speedInt = 100;
          
          if(rotational_speedInt<-100) rotational_speedInt = -100;
          else if(rotational_speedInt>100) rotational_speedInt = 100;
          
          if(directionsInt<0) directionsInt = 0;
          else if(directionsInt>360) directionsInt = 360;
          
          if(!FreeWheel) omni.mov_omni(linear_speedInt, rotational_speedInt, directionsInt);
          else omni.stop_motors();

          if(resetEnc1=="1")
          {
            omni.set_enc_value(M1,0); // resets to zero the encoder value [byte encoder, word encValue]
            delay(1); // waits 1ms for Omni3MD to process information
          }
          if(resetEnc2=="1")
          {
            omni.set_enc_value(M2,0);
            delay(1); // waits 1ms for Omni3MD to process information
          }
          if(resetEnc3=="1")
          {
            omni.set_enc_value(M3,0);
            delay(1); // waits 1ms for Omni3MD to process information
          }
          
          //dribler1
          if(direct_dribler1=="1") digitalWrite(MM1,HIGH);
          else if(direct_dribler1=="0") digitalWrite(MM1,LOW);
          if(direct_dribler1!="2") analogWrite(DRIBLLER1, vel_dribler1.toInt());     //PWM Speed Control  
          
          //dribler2
          if(direct_dribler2=="1") digitalWrite(MM2,HIGH);
          else if(direct_dribler2=="0") digitalWrite(MM2,LOW);
          if(direct_dribler2!="2") analogWrite(DRIBLLER2, vel_dribler2.toInt());     //PWM Speed Control  
          
          if(kickTime>0)
          {
            if(kickTime>maxKick)kickTime = maxKick;
            if(kickTime < 0)kickTime = 0;
            
            digitalWrite(KICKPIN, HIGH);
            Timer1.initialize(kickTime*1000);
          }
    }
  }
